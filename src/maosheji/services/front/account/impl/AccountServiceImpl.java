package maosheji.services.front.account.impl;import java.io.IOException;import java.text.MessageFormat;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Map.Entry;import maosheji.core.FrontContainer;import maosheji.core.ServersManager;import maosheji.core.front.SystemManager;import maosheji.core.util.FreemarkerTemplateUtil;import maosheji.core.util.MD5;import maosheji.core.util.MailUtil;import maosheji.services.front.account.AccountService;import maosheji.services.front.account.bean.Account;import maosheji.services.front.account.dao.AccountDao;//import maosheji.services.front.email.EmailService;//import maosheji.services.front.email.bean.Email;//import maosheji.services.front.notifyTemplate.bean.NotifyTemplate;import maosheji.services.manage.accountRank.bean.AccountRank;import org.apache.commons.lang.StringUtils;import org.apache.commons.lang.time.DateUtils;import org.apache.log4j.Logger;import freemarker.template.TemplateException;public class AccountServiceImpl extends ServersManager<Account> implements		AccountService {	private static final Logger logger = Logger.getLogger(AccountServiceImpl.class);	private AccountDao accountDao;	//private EmailService emailService;	/*public void setEmailService(EmailService emailService) {		this.emailService = emailService;	}*/	public void setAccountDao(AccountDao accountDao) {		this.accountDao = accountDao;	}	public int selectCount(Account e) {		return accountDao.selectCount(e);	}		/**	 * 更新会员信息。	 * 如果会员等级发生变动，则需要使用邮件、短信、站内信的方式告知用户。	 */		@Override	public void updateScore(Account acc) {		if(StringUtils.isBlank(acc.getAccount())){			throw new NullPointerException();		}				synchronized (FrontContainer.update_account_score_lock) {			Account account = accountDao.selectAccountScore(acc.getAccount());			if(account==null){				throw new NullPointerException();			}						acc.setScore(acc.getAddScore() + account.getScore());						logger.error("SystemManager.accountRankMap = " + SystemManager.accountRankMap.size());			for(Iterator<Entry<String, AccountRank>> it = SystemManager.accountRankMap.entrySet().iterator();it.hasNext();){				Entry<String, AccountRank> item = it.next();				AccountRank accountRank = item.getValue();				if (acc.getScore() == accountRank.getMinScore()						|| acc.getScore() == accountRank.getMaxScore()						|| (acc.getScore() > accountRank.getMinScore() && acc								.getScore() < accountRank.getMaxScore())) {					// 得到此范围内的会员等级代号					acc.setRank(accountRank.getCode());										logger.error(">>accountRank.getCode() = " + accountRank.getCode());					break;				}			}						logger.error("account.getRank()="+account.getRank()+",acc.getRank()="+acc.getRank());						//如果新的会员等级代号和旧的一样，则说明会员的等级没有发生任何的变化。不需要更新 也不需要邮件通知			if(acc.getRank().equals(account.getRank())){				acc.setRank(null);			}else{				int oldAccountRank = Integer.valueOf(account.getRank().substring(1));//旧的会员等级				int newAccountRank = Integer.valueOf(acc.getRank().substring(1));//新的会员等级				if(oldAccountRank > newAccountRank){					//会员等级降了				}else if(oldAccountRank < newAccountRank){					//会员等级升了				}								//..通知会员			}						accountDao.updateScore(acc);			//可以邮件、短信、站内信 等方式通知用户，订单完成，积分已经打到用户的账户上了。		}	}		public void insertOutAccount(Account acc){		synchronized (this) {			if(acc==null){				throw new NullPointerException("acc is null");			}						acc.setAccount("_out_"+System.currentTimeMillis());			acc.setNickname("_out_");			accountDao.insert(acc);			logger.error("insertOutAccount.acc="+acc);		}	}	@Override	public void doForget(Account e) {		logger.error("forget...account="+e.getAccount());		if(e==null || StringUtils.isBlank(e.getAccount())){			throw new NullPointerException("请求非法！");		}				Account acc = new Account();		acc.setAccount(e.getAccount());		acc = accountDao.selectOne(acc);		if(acc==null){			throw new NullPointerException("根据账号查询不到指定的会员信息，请联系管理员！");		}			}	@Override	public void updatePasswordByAccount(Account acc) {		accountDao.updatePasswordByAccount(acc);	}	@Override	public void updateEmailByAccount(Account acc) {		accountDao.updateEmailByAccount(acc);	}	public static void main(String[] args) {			String content = "ab,cc,{1},{2},{0},dd,ff";		Object array[] = {"userName", "password", "2014-10-12"};	      content = MessageFormat.format(content, array);	      System.out.println(content);	}	public void updateDataWhenActiveAccount(Account acc, String account) {		// TODO Auto-generated method stub			}}